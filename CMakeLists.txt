project(Sunstrider)
cmake_minimum_required(VERSION 2.6)

# Don't escape preprocessor definitions automatically.
cmake_policy(SET CMP0005 OLD)

include(CheckIncludeFiles)
include(cmake/CheckPlatform.cmake)
include(cmake/FindMySql.cmake)
include(cmake/FindPostgreSql.cmake)
include(cmake/FindReadline.cmake)
include(cmake/ConfigureBoost.cmake)
include(cmake/FindPCHSupport.cmake)
configure_file(
  "${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
  IMMEDIATE @ONLY)
add_custom_target(uninstall "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")

option(DO_DEBUG "Debug mode (No optimization and debug symbols)" 0)
option(DO_WARN "Enable all compilation warnings" 0)
option(TOOLS "Build map/vmap/mmap extraction/assembler tools" 1)
option(PLAYERBOT "Include playerbot system (DO NOT USE, WIP, not compiling)" 0)
option(PROFILING "Build-in profiling system" 0)

if(NOT CONF_DIR)
	set(CONF_DIR ${CMAKE_INSTALL_PREFIX}/etc)
endif(NOT CONF_DIR)

set(LIBSDIR ${CMAKE_INSTALL_PREFIX}/lib)

message("* Will install to: ${CMAKE_INSTALL_PREFIX}")
if(UNIX)
	message("* With config dir at: ${CONF_DIR}")
message("* Libs install dir at: ${LIBSDIR}")
endif(UNIX)

find_package(OpenSSL)

if(OPENSSL_FOUND)
message(STATUS "Found OpenSSL library (version ${OPENSSL_VERSION}) : ${OPENSSL_LIBRARIES}")
message(STATUS "Include dir is: ${OPENSSL_INCLUDE_DIR}")
else(OPENSSL_FOUND)
message(SEND_ERROR "** OpenSSL library not found! Sunstrider cannot be compiled!")
return()
endif(OPENSSL_FOUND)

if(UNIX)
	find_package(ZLIB)
	set(ZLIB ${ZLIB_LIBRARY})
	find_package(BZip2)
else()
	# Package overloads
	set(BZIP2_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/dep/bzip2")
	set(ZLIB_INCLUDE_DIR " ${PROJECT_SOURCE_DIR}/dep/zlib")
	set(BZIP2_LIBRARIES "bzip2")
	set(ZLIB_LIBRARIES "zlib")
endif()

find_package(Git) 
FIND_MYSQL()

if (WIN32)
	if(PLATFORM EQUAL 64)
		set (LIBIRCCLIENT_LIB_WIN ${PROJECT_SOURCE_DIR}/dep/lib/x64_release/libircclient.lib)
	elseif(PLATFORM EQUAL 32)
		set (LIBIRCCLIENT_LIB_WIN ${PROJECT_SOURCE_DIR}/dep/lib/win32_release/libircclient.lib)
	else()
		message(SEND_ERROR "Could not find platform when trying to set LIBIRCCLIENT_LIB_WIN")
	endif()
endif()

message("-- Miscellaneus options:")

if(DO_DEBUG)
    message("* Debug mode ON")
    if(UNIX)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -ggdb")
    elseif(WIN32)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Od /Ob0")
    endif()
    add_definitions(-DTRINITY_DEBUG)
endif(DO_DEBUG)

if(DO_WARN)
    message("* All warnings mode")
    if(UNIX)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wfatal-errors -Wextra")
    elseif(WIN32 AND MSVC)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Wall")
    endif()
endif(DO_WARN)

if(UNIX)
    message("* Building with readline")
endif()

if(UNIX)
  FIND_READLINE()
  if(READLINE_FOUND)
      message(STATUS "Found Readline library: ${READLINE_LIBRARY}")
      message(STATUS "Include dir is: ${READLINE_INCLUDE_DIR}")
  else(READLINE_FOUND)
      message(SEND_ERROR "** Readline library not found!")
      message(SEND_ERROR "** Your distro may provide a binary for Readline e.g. for ubuntu try apt-get install libreadline5-dev")
  return()
  endif(READLINE_FOUND)
endif(UNIX)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)

if(UNIX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fopenmp")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_TRINITY_SCRIPT_CONFIG='\"${CONF_DIR}/worldserver.conf\"'")
elseif(WIN32)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP /openmp /bigobj ")
endif ()

if(PROFILING)
    message(STATUS "Built-in profiling enabled")
    add_definitions(-DPROFILING)
else()
    message(STATUS "Built-in profiling disabled")
endif()

if(PLAYERBOT)
    message(STATUS "Playerbot enabled")
    add_definitions(-DPLAYERBOT)
else()
    message(STATUS "Playerbot disabled")
endif()


set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
set(CMAKE_INSTALL_RPATH "${LIBSDIR}")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

add_subdirectory(dep)
add_subdirectory(src)
add_subdirectory(sql)
add_subdirectory(contrib)
